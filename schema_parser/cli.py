import argparse
from pathlib import Path
from .schema_parser import parse_all_classes
from .hpp_gen import generate_cpp
from .utils import clean_output_dir

from pathlib import Path

HEADER_COMMENT = """/*
\t-> By: l666.eth0
\t-> Github: https://github.com/LeandroVictor666
\t-> Discord: leandrovictor666
*/
"""


def main():

    parser = argparse.ArgumentParser(description="Convert CS2 Schema dump to C++ code")

    parser.add_argument(
        "dump_file",
        help="Input dump text file (ex: the schema dump generated by asphyxia SDK)",
    )

    parser.add_argument(
        "--output",
        help="Output SDK Dump directory, if not specified, it will be created in the same directory as the dump_file",
        default=None,
        type=str,
    )

    parser.add_argument(
        "--class",
        dest="target_class",
        help="Generate only for a specific class (ex: C_CSPlayerPawn)",
    )

    parser.add_argument(
        "--base",
        dest="base_class",
        help="The base class name from which the TARGET_CLASS will inherit (ex: C_BaseEntity)",
    )

    args = parser.parse_args()

    output_directory = args.output
    if not output_directory:
        output_directory = Path(args.dump_file).parent / "SDK-Dump"
    else:
        output_directory = Path(output_directory)

    clean_output_dir(output_directory)

    with open(args.dump_file, "r", encoding="utf-8") as f:
        dump_text = f.read()

    all_classes = parse_all_classes(dump_text)

    if args.target_class:
        cls = args.target_class
        if cls not in all_classes:
            print(f"Class '{cls}' not found in dump.")
            return
        cpp_code = generate_cpp(cls, all_classes[cls], base_class=args.base_class or "")
        with open(f"{output_directory}/{cls}.h", "w", encoding="utf-8") as f:
            f.write(HEADER_COMMENT + "\n")
            f.write(cpp_code)
        print(f"Generated: {output_directory}/{cls}.h")
    else:
        with open(f"{output_directory}/SchemaClasses.h", "w", encoding="utf-8") as f:
            f.write("#pragma once\n\n\n")
            f.write(HEADER_COMMENT + "\n\n\n")
            f.write("#pragma region forward_declaration\n\n")
            for class_name in all_classes:
                f.write(f"\tclass {class_name};\n")
            f.write("\n#pragma endregion\n\n\n\n")
            for class_name, fields in all_classes.items():
                cpp_code = generate_cpp(
                    class_name, fields, base_class=args.base_class or ""
                )
                f.write(cpp_code + "\n\n\n")

        print(f"Generated: {output_directory}/SchemaClasses.h")


if __name__ == "__main__":
    main()
